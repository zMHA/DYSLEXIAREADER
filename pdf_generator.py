import logging
from weasyprint import HTML, CSS
from weasyprint.text.fonts import FontConfiguration
import tempfile
import os

logger = logging.getLogger(__name__)

def generate_pdf(content, summary, source):
    """
    Generate a dyslexia-friendly PDF export of the content.
    """
    try:
        # Create HTML content with dyslexia-friendly styling
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>DyslexiFy Export</title>
            <style>
                @import url('https://fonts.googleapis.com/css2?family=OpenDyslexic&display=swap');
                
                body {{
                    font-family: 'OpenDyslexic', Arial, sans-serif;
                    font-size: 16px;
                    line-height: 2.0;
                    color: #2c3e50;
                    background-color: #fefefe;
                    margin: 40px;
                    max-width: 800px;
                }}
                
                h1 {{
                    color: #3498db;
                    font-size: 24px;
                    margin-bottom: 20px;
                    border-bottom: 2px solid #3498db;
                    padding-bottom: 10px;
                }}
                
                h2 {{
                    color: #2980b9;
                    font-size: 20px;
                    margin-top: 30px;
                    margin-bottom: 15px;
                }}
                
                .source-info {{
                    background-color: #ecf0f1;
                    padding: 15px;
                    margin-bottom: 25px;
                    border-left: 4px solid #3498db;
                    font-size: 14px;
                }}
                
                .summary {{
                    background-color: #e8f6f3;
                    padding: 20px;
                    margin: 25px 0;
                    border-left: 4px solid #1abc9c;
                    border-radius: 5px;
                }}
                
                .content {{
                    margin-top: 25px;
                }}
                
                p {{
                    margin-bottom: 15px;
                    text-align: left;
                }}
                
                .footer {{
                    margin-top: 40px;
                    text-align: center;
                    color: #7f8c8d;
                    font-size: 12px;
                    border-top: 1px solid #bdc3c7;
                    padding-top: 15px;
                }}
            </style>
        </head>
        <body>
            <h1>DyslexiFy Export</h1>
            
            <div class="source-info">
                <strong>Source:</strong> {source}
            </div>
            
            <h2>Summary</h2>
            <div class="summary">
                {format_text_for_html(summary)}
            </div>
            
            <h2>Full Content</h2>
            <div class="content">
                {format_text_for_html(content)}
            </div>
            
            <div class="footer">
                Generated by DyslexiFy - Making reading accessible for everyone
            </div>
        </body>
        </html>
        """
        
        # Create a temporary HTML file
        with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False, encoding='utf-8') as temp_file:
            temp_file.write(html_content)
            temp_file_path = temp_file.name
        
        try:
            # Generate PDF
            pdf_data = HTML(filename=temp_file_path).write_pdf()
            return pdf_data
            
        finally:
            # Clean up temporary file
            os.unlink(temp_file_path)
            
    except Exception as e:
        logger.error(f"Error generating PDF: {e}")
        raise Exception(f"Could not generate PDF: {str(e)}")

def format_text_for_html(text):
    """Format text for HTML display with proper paragraphs"""
    if not text:
        return "<p>No content available</p>"
    
    # Split text into paragraphs and wrap in <p> tags
    paragraphs = text.split('\n')
    formatted_paragraphs = []
    
    for paragraph in paragraphs:
        paragraph = paragraph.strip()
        if paragraph:
            # Escape HTML characters
            paragraph = paragraph.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            formatted_paragraphs.append(f"<p>{paragraph}</p>")
    
    return '\n'.join(formatted_paragraphs) if formatted_paragraphs else "<p>No content available</p>"
